{"version":3,"sources":["logo.svg","App.js","components/Filter.js","components/CommunicationNotes.js","AppPart1.js","serviceWorker.js","index.js"],"names":["module","exports","App","Filter","this","props","personList","map","person","index","name","selection","key","number","Component","personEntry","axios","post","then","response","data","id","delete","baseUrl","get","put","AppPart1","useState","newNameEntry","setNewNameEntry","newNumberEntry","setNewNumberEntry","setPersonList","setSelection","errorMessage","setErrorMessage","handleUpdate","window","confirm","communicationService","entry","catch","err","handleDeleteEntry","filter","error","alert","useEffect","className","value","onChange","event","target","onSubmit","preventDefault","personExists","find","newPerson","concat","console","log","setTimeout","type","onClick","bind","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc301e22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nconst HelloMsg = props => {\n  return (\n    <div>\n      <p>\n        Hello {props.name}, you are {props.age} years old\n      </p>\n    </div>\n  );\n};\n\nfunction App() {\n  const now = new Date();\n  const a = 10;\n  const b = 20;\n  const name = \"dheeraj\";\n  const age = 25;\n  return (\n    <div className=\"App\">\n      <HelloMsg name={name} age={age} />\n      <p>Hello World it is {now.toString()}</p>\n      <p>\n        {a} plus {b} equals {a + b}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass Filter extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.personList.map((person, index) =>\n          person.name === this.props.selection ? (\n            <li key={index}>\n              {person.name} {person.number}\n            </li>\n          ) : (\n            \"\"\n          )\n        )}\n      </div>\n    );\n  }\n}\nexport default Filter;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst insertPersonDetails = personEntry => {\n  return axios.post(baseUrl, personEntry).then(response => {\n    return response.data;\n  });\n};\n\nconst deletePerson = id => {\n  return axios.delete(baseUrl + \"/\" + id);\n};\n\nconst getAllPeople = () => {\n  return axios.get(baseUrl);\n};\n\nconst updatePerson = personEntry => {\n  return axios\n    .put(baseUrl + \"/\" + personEntry.id, personEntry)\n    .then(response => {\n      return response.data;\n    });\n};\n\nexport default {\n  insert: insertPersonDetails,\n  delete: deletePerson,\n  getAll: getAllPeople,\n  update: updatePerson\n};\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport Filter from \"./components/Filter\";\nimport communicationService from \"./components/CommunicationNotes\";\nimport \"./index.css\";\n\nconst AppPart1 = () => {\n  const [newNameEntry, setNewNameEntry] = useState(\"\");\n  const [newNumberEntry, setNewNumberEntry] = useState(\"\");\n  const [personList, setPersonList] = useState([]);\n  const [selection, setSelection] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleAddName = event => {\n    setNewNameEntry(event.target.value);\n  };\n  const handleAddNumber = event => {\n    setNewNumberEntry(event.target.value);\n  };\n  const handleAddPerson = event => {\n    event.preventDefault();\n    const personEntry = {\n      name: newNameEntry,\n      number: newNumberEntry\n    };\n    var personExists = personList.find(\n      person => person.name === personEntry.name\n    );\n\n    if (personExists != null) {\n      personEntry.id = personExists.id;\n      handleUpdate(personEntry);\n    } else {\n      communicationService\n        .insert(personEntry)\n        .then(newPerson => {\n          setPersonList(personList.concat(newPerson));\n          setNewNameEntry(\"\");\n          setNewNumberEntry(\"\");\n        })\n        .catch(error => {\n          console.log(\"Error message is triggered: \");\n          console.log(error.response.data);\n          setErrorMessage(error.response.data.error);\n          setTimeout(() => {\n            setErrorMessage(\"\");\n          }, 5000);\n        });\n    }\n  };\n\n  const handleFilter = event => {\n    setSelection(event.target.value);\n  };\n\n  const handleUpdate = person => {\n    var updateConfirm = window.confirm(\n      person.name +\n        \" is already added to phonebook, replace the old number with a new one?\"\n    );\n    if (updateConfirm === true) {\n      communicationService\n        .update(person)\n        .then(response => {\n          setPersonList(\n            personList.map(entry =>\n              entry.id === person.id\n                ? { ...entry, number: person.number }\n                : entry\n            )\n          );\n          setNewNameEntry(\"\");\n          setNewNumberEntry(\"\");\n        })\n        .catch(err => setErrorMessage(err));\n    }\n  };\n\n  const handleDeleteEntry = person => {\n    var deleteConfirm = window.confirm(\"Delete \" + person.name + \" ?\");\n    if (deleteConfirm === true) {\n      communicationService\n        .delete(person.id)\n        .then(setPersonList(personList.filter(entry => entry.id != person.id)))\n        .catch(error => {\n          alert(`the person '${person.name} does not exist'`);\n        });\n    }\n  };\n\n  useEffect(() => {\n    communicationService.getAll().then(response => {\n      setPersonList(response.data);\n    });\n  }, []);\n\n  const DisplayNumbers = () => {\n    return (\n      <div>\n        <ul>\n          {personList.map((person, index) => (\n            <li key={index}>\n              {person.name} {person.number}{\" \"}\n              <button id={index} onClick={handleDeleteEntry.bind(this, person)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  };\n  const ErrorMessage = () => {\n    if (errorMessage === \"\") return <div></div>;\n    return (\n      <div className=\"error\">\n        <p>{errorMessage}</p>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ErrorMessage />\n      filter shown with{\" \"}\n      <input value={selection} onChange={handleFilter}></input>\n      <Filter personList={personList} selection={selection} />\n      <h2> Add a new</h2>\n      <form onSubmit={handleAddPerson}>\n        <div>\n          name: <input value={newNameEntry} onChange={handleAddName} />\n        </div>\n        <div>\n          number: <input value={newNumberEntry} onChange={handleAddNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <DisplayNumbers />\n    </div>\n  );\n};\n\nexport default AppPart1;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppPart1 from \"./AppPart1\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AppPart1 />, document.getElementById(\"root\"));\n//ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}